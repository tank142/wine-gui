#include "findlink.h"
#include "shortcutread.h"
#include "tablabels.h"
#include "shelloutput.h"
#include "iconextract.h"
#include <QGridLayout>
#include <QDir>
#include <QIcon>
#include <QHeaderView>
#include <QStandardPaths>
#include <QMenu>
#include <QMessageBox>
#include <QSettings>
#include <QFileDialog>
#include <iostream>
#include <QRegularExpression>
using namespace std;
tabLabels::tabLabels(main_target *t,QWidget *parent) : QWidget(parent)
{
	target = t;
	vbox = new QVBoxLayout(this);
	model = new QStandardItemModel;
	model->setHorizontalHeaderLabels(QStringList() << tr("name") << tr("shortcut") );
	labels = new QTreeView(this);
	labels->setModel(model);
	labels->header()->setStretchLastSection(false);
	labels->header()->setSectionResizeMode(0,QHeaderView::Stretch);
	labels->setEditTriggers(QTreeView::NoEditTriggers);
	labels->setContextMenuPolicy(Qt::CustomContextMenu);
	vbox->addWidget(labels);
	setLayout(vbox);
	connect(labels,	&QTreeView::doubleClicked , this , &tabLabels::clicked2);
	connect(labels,	&QTreeView::customContextMenuRequested, this, &tabLabels::rightClicked);
}
void tabLabels::labels_connect(){
	connect(labels,	&QTreeView::customContextMenuRequested, this, &tabLabels::rightClicked);
}
void tabLabels::rightClicked(){
	QMenu *m_menu = new QMenu("&SubMenu",this);
	if(labels->currentIndex().row() > -1){
		QAction *actionDebugging = new QAction(tr("debug"),m_menu);
		m_menu->addAction(actionDebugging);
		connect(actionDebugging, &QAction::triggered, this, &tabLabels::runDebugging);
		QAction *actionOpen = new QAction(tr("open"),m_menu);
		m_menu->addAction(actionOpen);
		connect(actionOpen, &QAction::triggered, this, &tabLabels::runOpen);
		QAction *editorOpen = new QAction(tr("edit"),m_menu);
		m_menu->addAction(editorOpen);
		connect(editorOpen, &QAction::triggered, this, &tabLabels::editor_slot);
		if(!findLink(target->prefix_path + + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text(),
					target->home + "/.local/share/applications/").ckRc()){
			QAction *action = new QAction(tr("add_main_menu"));
			connect(action, &QAction::triggered , this , &tabLabels::add_menu_slot);
			m_menu->addAction(action);
		}else{
			QAction *action = new QAction(tr("del_main_menu"));
			connect(action, &QAction::triggered , this , &tabLabels::del_menu_slot);
			m_menu->addAction(action);
		}
		if(!findLink(target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text(),
					QStandardPaths::writableLocation(QStandardPaths::DesktopLocation)).ck()){
			QAction *action = new QAction(tr("add_desktop"));
			connect(action, &QAction::triggered , this , &tabLabels::add_desktop_slot);
			m_menu->addAction(action);
		}else{
			QAction *action = new QAction(tr("del_desktop"));
			connect(action, &QAction::triggered , this , &tabLabels::del_desktop_slot);
			m_menu->addAction(action);
		}
		QAction *change_icon = new QAction(tr("change_icon"));
		QAction *del = new QAction(tr("del"));
		connect(change_icon, &QAction::triggered , this , &tabLabels::change_icon_slot);
		connect(del, &QAction::triggered , this , &tabLabels::del_slot);
		m_menu->addAction(change_icon);
		m_menu->addAction(del);
		m_menu->addSeparator();
	}
	QAction *add = new QAction(tr("create"));
	connect(add, &QAction::triggered , this , &tabLabels::add_slot);
	m_menu->addAction(add);
	m_menu->popup(QCursor::pos());
	m_menu->show();
}
void tabLabels::clicked2(){
	shell *wine;
	wine = new shell("wine",QStringList());
	wine->envSetup(target);
	wine->env->insert("WINEDEBUG","-all");
	wine->proc->setWorkingDirectory(target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text());
	wine->exec = target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text() + "/exec.sh";
	wine->start();
}
void tabLabels::runDebugging(){
	shellOutputDebugging *wine;
	wine = new shellOutputDebugging(target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text() + "/exec.sh",QStringList());
	wine->exec->proc->setWorkingDirectory(target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text());
	QProcessEnvironment env(QProcessEnvironment::systemEnvironment());
	env.insert("WINEDEBUG","");
	wine->exec->proc->setProcessEnvironment(env);
	wine->start();
}
void tabLabels::runOpen(){
	QFile FILE(target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text() + "/exec.sh");
	if (FILE.exists()){
		FILE.open(QFile::ReadOnly);
		QTextStream t(&FILE);
		QRegularExpression rx("WORKDIR=");
		while(!t.atEnd()){
		  QString l = t.readLine();
		  if(rx.match(l).hasMatch()){
			  FILE.close();
			  l.replace(rx,"");
			  l.replace(QRegularExpression("\\$WINEPREFIX"),target->prefix_path);
			  l.remove(QRegularExpression("^\""));
			  l.remove(QRegularExpression("\"$"));
			  shell *open = new shell("xdg-open",QStringList() << l);
			  open->start();
		  }
		}
		FILE.close();
	}
}
QIcon tabLabels::find_icon(QString dir){
	foreach(QString s,QStringList() << "16x16" << "20x20" << "22x22" << "24x24" << "36x36"
		<< "32x32" << "40x40" << "41x47" << "48x48" << "48x96" << "60x60" << "64x64"
		<< "72x72" << "80x80" << "96x96"<< "128x128" << "150x150" << "160x160" << "192x192"
		<< "256x256" << "14x14" << "13x256" << "13x13" << "10x10" << "8x8"){
		if(QDir(dir + "/icon/" + s).exists()){
			QDir i;i.setFilter(QDir::NoDotAndDotDot | QDir::Files);i.setPath(dir + "/icon/" + s);
			return QIcon(i.path() + "/" + i.entryList().at(0));
		}
	}
	return QIcon();
}
QString tabLabels::read_name(QString s){
	QFile FILE(s + "/exec.desktop");
	if (FILE.exists()){
		FILE.open(QFile::ReadOnly);
		QTextStream t(&FILE);
		while(!t.atEnd()){
		  QString l = t.readLine();
		  QRegularExpression rx("^Name=");
		  if(rx.match(l).hasMatch()){
			  FILE.close();
			  return l.remove(rx);
		  }
		}
		FILE.close();
	}
	return "";
}
void tabLabels::shortcuts(){
	while (model->rowCount() > 0){
		model->item(0)->~QStandardItem();
		model->removeRow(0);
	}
	QDir d;d.setFilter(QDir::Dirs | QDir::NoDotAndDotDot);
	d.setPath(target->prefix_path + "/shortcuts");
	#if QT_VERSION < 0x060000
		QString wine = QString::fromUtf8(QSettings(target->prefix_path + "/WINE.cfg",QSettings::IniFormat).value("WINE").toByteArray());
	#else
		QString wine = QSettings(target->prefix_path + "/WINE.cfg",QSettings::IniFormat).value("WINE").toString();
	#endif
	if(wine == "System" || wine.size() == 0){
		wine = "wine";
	}else{
		wine = (target->WINE_VER + "/" + wine + "/bin/wine");
	}
	foreach(QString s,d.entryList()){
		shortcutRead( d.path() + "/" + s,wine,target);
		QList<QStandardItem *> shortcut;
		shortcut.append(new QStandardItem(find_icon(d.path() + "/" + s),read_name(d.path() + "/" + s)));
		shortcut.append(new QStandardItem(s.right(s.size() - s.lastIndexOf("/")-1)));
		model->appendRow(shortcut);
	}
}
bool tabLabels::fileExists(QString s,QString f){
	QFile file(f);
	if(!file.exists()){return true;}
	QFileInfo fileInf(f);
	if(fileInf.isSymbolicLink()){
		if(fileInf.symLinkTarget() == s){return true;}
	}
	QMessageBox msgBox(this);
	msgBox.setText(tr("file_exists") + "\"" + f +  "\"\n" + tr("overwrite"));
	QAbstractButton *Yes = msgBox.addButton(tr("yes"), QMessageBox::YesRole);
	msgBox.addButton(tr("no"), QMessageBox::NoRole);
	msgBox.exec();
	if(msgBox.clickedButton()==Yes){
		file.remove();
		return true;
	}
	return false;
}
void tabLabels::add_menu_slot(){
	if(!QDir(target->home + "/.local/share/applications/").exists()){
		QDir().mkpath(target->home + "/.local/share/applications");
	}
	QDir d(target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text() + "/icon");
	QDir().mkpath(target->home + "/.local/share/icons/hicolor");
	d.setFilter(QDir::NoDotAndDotDot | QDir::Dirs);
	foreach(QString dir,d.entryList()){
		QDir().mkpath(target->home + "/.local/share/icons/hicolor/" + dir + "/apps");
		QString name = QDir(d.path() + "/" + dir ).entryList().at(2);
		QFile file(d.path() + "/" + dir + "/" + name);
		QFile l(target->home + "/.local/share/icons/hicolor/" + dir + "/apps/" + name);
		if(l.exists()){l.remove();}
		if(!fileExists(d.path() + "/" + dir + "/" + name,
					   target->home + "/.local/share/icons/hicolor/" + dir + "/apps/" + name)){return;}
		file.link(target->home + "/.local/share/icons/hicolor/" + dir + "/apps/" + name);
	}
	updateIcon();
	if(!fileExists(target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text() + "/exec.desktop",
				target->home + "/.local/share/applications/" + model->item(labels->currentIndex().row(),1)->text() + ".desktop")){return;}
	QFile::link(target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text() + "/exec.desktop",
				target->home + "/.local/share/applications/" + model->item(labels->currentIndex().row(),1)->text() + ".desktop");

	shell *update_menu = new shell("xdg-desktop-menu",QStringList() << "forceupdate" );
	update_menu->start();update_menu->wait(-1);
}
void tabLabels::add_desktop_slot(){
	if(!QDir(QStandardPaths::writableLocation(QStandardPaths::DesktopLocation)).exists()){
		QDir().mkpath(QStandardPaths::writableLocation(QStandardPaths::DesktopLocation));
	}
	QDir d(target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text() + "/icon");
	QDir().mkpath(target->home + "/.local/share/icons/hicolor");
	d.setFilter(QDir::NoDotAndDotDot | QDir::Dirs);
	foreach(QString dir,d.entryList()){
		QDir().mkpath(target->home + "/.local/share/icons/hicolor/" + dir + "/apps/");
		QString name = QDir(d.path() + "/" + dir ).entryList().at(2);
		QFile file(d.path() + "/" + dir + "/" + name);
		if(!fileExists(d.path() + "/" + dir + "/" + name,
					   target->home + "/.local/share/icons/hicolor/" + dir + "/apps/" + name)){return;}
		file.link(target->home + "/.local/share/icons/hicolor/" + dir + "/apps/" + name);
	}
	updateIcon();
	if(!fileExists(target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text() + "/exec.desktop",
				   QStandardPaths::writableLocation(QStandardPaths::DesktopLocation) + "/" + model->item(labels->currentIndex().row(),1)->text() + ".desktop")){return;}
	QFile::link(target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text() + "/exec.desktop",
				QStandardPaths::writableLocation(QStandardPaths::DesktopLocation) + "/" + model->item(labels->currentIndex().row(),1)->text() + ".desktop");
	shell *fix1 = new shell("chmod",QStringList() << "a+x"
	<< model->item(labels->currentIndex().row(),1)->text() + ".desktop" );
	fix1->proc->setWorkingDirectory(QStandardPaths::writableLocation(QStandardPaths::DesktopLocation));
	fix1->start();fix1->wait(-1);
	shell *fix2 = new shell("gio",QStringList()
	<< "set"
	<< model->item(labels->currentIndex().row(),1)->text() + ".desktop" 
	<< "metadata::trusted"
	<< "true");
	fix2->proc->setWorkingDirectory(QStandardPaths::writableLocation(QStandardPaths::DesktopLocation));
	fix2->start();fix2->wait(-1);
	QProcess *touch = new QProcess();
	touch->setWorkingDirectory(QStandardPaths::writableLocation(QStandardPaths::DesktopLocation));
	touch->setProgram("touch");
	touch->setArguments(QStringList() << "--no-dereference" << "./" + model->item(labels->currentIndex().row(),1)->text() + ".desktop" );
	touch->start();
	//update_file *t = new update_file(touch);t->start();
}
void tabLabels::updateIcon(){
	shell *update_icon = new shell("xdg-icon-resource",QStringList() << "forceupdate" );
	update_icon->start();update_icon->wait(-1);
}
void tabLabels::del_menu_slot(){
	findLink(target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text(),
			 target->home + "/.local/share/applications").rmRc();
}
void tabLabels::del_desktop_slot(){
	findLink(target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text(),
			 QStandardPaths::writableLocation(QStandardPaths::DesktopLocation)).rm();
}
void tabLabels::add_slot(){
	file = new fileDesktopWidget(target->prefix_path, "", target);
	vbox->addWidget(file);
	connect(file, &fileDesktopWidget::shortcuts_update , this , &tabLabels::shortcuts);
	disconnect(labels,	&QTreeView::customContextMenuRequested, this, &tabLabels::rightClicked);
	connect(file,	&fileDesktopWidget::destroyed, this, &tabLabels::labels_connect);
	emit hide();
}
void tabLabels::editor_slot(){
	file = new fileDesktopWidget(target->prefix_path, model->item(labels->currentIndex().row(),1)->text(),target);
	vbox->addWidget(file);
	connect(file, &fileDesktopWidget::shortcuts_update , this , &tabLabels::shortcuts);
	disconnect(labels,	&QTreeView::customContextMenuRequested, this, &tabLabels::rightClicked);
	connect(file, &fileDesktopWidget::destroyed , this , &tabLabels::labels_connect);
	emit hide();
}
void tabLabels::change_icon_slot(){
	QFile FILE(target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text() + "/exec.sh");
	if (FILE.exists()){
		QString icon;
		FILE.open(QFile::ReadOnly);
		QTextStream t(&FILE);
		QRegularExpression rx("WORKDIR=");
		while(!t.atEnd()){
		  QString l = t.readLine();
		  if(rx.match(l).hasMatch()){
			  FILE.close();
			  l.replace(rx,"");
			  l.replace(QRegularExpression("\\$WINEPREFIX"),target->prefix_path);
			  l.remove(QRegularExpression("^\""));
			  l.remove(QRegularExpression("\"$"));
			  icon = QFileDialog::getOpenFileName(0, tr("change_icon"), l, "*.exe *.EXE *.ico");
		  }
		}
		FILE.close();
		if(icon.size()>0){
			QS
			findLink(target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text(),
					 target->home + "/.local/share/icons").rmRc();
			QDir dir(target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text() + "/icon");
			dir.removeRecursively();
			dir.mkpath(target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text() + "/icon");
			iconExtract(icon->text(), icon , prefix + "/shortcuts/" + shortcut->text()).start();
		}
	}
}
void tabLabels::del_slot(){
	findLink(target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text(),
			 target->home + "/.local/share/applications").rmRc();
	findLink(target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text(),
			 target->home + "/.local/share/icons").rmRc();
	findLink(target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text(),
			 QStandardPaths::writableLocation(QStandardPaths::DesktopLocation)).rm();
	QDir(target->prefix_path + "/shortcuts/" + model->item(labels->currentIndex().row(),1)->text()).removeRecursively();
	shortcuts();
}
void update_file::run(){
	update->start();update->waitForFinished(-1);
	sleep(2);
	update->start();update->waitForFinished(-1);
	update->deleteLater();
	deleteLater();
}
